{
  "stage1_tasks": [
    {
      "id": 1,
      "title": "Basic Setup",
      "description": "Create a simple Python function that takes two numbers as input and returns their sum. Name the function 'add_numbers'.",
      "details": [
        "Create a new Python file called 'calculator.py'",
        "Define a function named 'add_numbers' that takes two parameters",
        "The function should return the sum of the two parameters",
        "Test your function with a few examples"
      ]
    },
    {
      "id": 2,
      "title": "Extend Functionality",
      "description": "Add subtraction, multiplication, and division functions to your calculator.",
      "details": [
        "Add a 'subtract_numbers' function",
        "Add a 'multiply_numbers' function",
        "Add a 'divide_numbers' function (handle division by zero)",
        "Test all functions with various inputs"
      ]
    },
    {
      "id": 3,
      "title": "User Interface",
      "description": "Create a simple command-line interface for your calculator.",
      "details": [
        "Create a main function that displays a menu of operations",
        "Allow the user to select an operation",
        "Prompt the user for two numbers",
        "Display the result and ask if they want to perform another calculation",
        "Handle invalid inputs gracefully"
      ]
    },
    {
      "id": 4,
      "title": "Error Handling & Documentation",
      "description": "Add comprehensive error handling and documentation to your calculator.",
      "details": [
        "Add docstrings to all functions",
        "Implement try-catch blocks for user input validation",
        "Add type hints to function parameters and return values",
        "Create a README.md file explaining how to use your calculator"
      ]
    }
  ],
  "stage2_tasks": [
    {
      "id": 1,
      "title": "Code Review & Refactoring",
      "description": "Review the existing calculator code and refactor it for better maintainability and performance.",
      "details": [
        "Examine the existing calculator.py file",
        "Identify areas for improvement in code structure",
        "Refactor functions to follow Python best practices",
        "Optimize any inefficient code patterns"
      ]
    },
    {
      "id": 2,
      "title": "Advanced Features",
      "description": "Add advanced mathematical operations to the calculator.",
      "details": [
        "Implement power/exponentiation function",
        "Add square root calculation",
        "Implement modulo operation",
        "Add factorial calculation function",
        "Test all new functions thoroughly"
      ]
    },
    {
      "id": 3,
      "title": "Data Persistence",
      "description": "Add the ability to save and load calculation history.",
      "details": [
        "Create a history tracking system",
        "Implement save history to file functionality",
        "Add load previous calculations feature",
        "Allow users to clear calculation history",
        "Display recent calculations in the interface"
      ]
    },
    {
      "id": 4,
      "title": "Testing & Validation",
      "description": "Create comprehensive unit tests and improve code validation.",
      "details": [
        "Write unit tests for all calculator functions",
        "Test edge cases and error conditions",
        "Add input validation for all user inputs",
        "Create automated test suite",
        "Document test coverage and results"
      ]
    }
  ]
}

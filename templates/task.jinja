{% extends "base.jinja" %}

{% block title %}{{ participant_id }} - Coding Task{% endblock %}

{% block additional_styles %}
.task-card {
    text-align: left;
}
h1 {
    text-align: center;
}
.participant-id {
    text-align: center;
}
.timer-section {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin: 20px 0;
    text-align: center;
}
.timer-display {
    font-size: 1.5em;
    font-weight: bold;
    color: #28a745;
    margin: 10px 0;
}
.timer-warning {
    color: #ffc107;
}
.timer-danger {
    color: #dc3545;
}
.timer-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
}
.timer-modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    text-align: center;
}
.timer-modal h3 {
    color: #dc3545;
    margin-bottom: 15px;
}
.timer-modal-buttons {
    margin-top: 20px;
}
.timer-modal-buttons button {
    margin: 0 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
}
.btn-continue-survey {
    background: #28a745;
    color: white;
}
.btn-continue-survey:hover {
    background: #218838;
}
.btn-finish-task {
    background: #6c757d;
    color: white;
}
.btn-finish-task:hover {
    background: #5a6268;
}
.coding-reminder {
    background: rgba(248, 249, 250, 0.95);
    border: none;
    border-radius: 8px;
    padding: 12px 16px;
    margin-bottom: 24px;
    font-size: 0.9em;
    color: #495057;
    text-align: center;
    position: sticky;
    top: 10px;
    z-index: 100;
    backdrop-filter: blur(8px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}
.coding-reminder.vibe {
    border-left-color: #6f42c1;
    background: rgba(111, 66, 193, 0.08);
}
.coding-reminder.ai-assisted {
    border-left-color: #17a2b8;
    background: rgba(23, 162, 184, 0.08);
}
.progress-bar {
    background: #e9ecef;
    border-radius: 10px;
    height: 20px;
    margin: 20px 0;
    overflow: hidden;
}
.progress-fill {
    background: linear-gradient(90deg, #28a745, #20c997);
    height: 100%;
    transition: width 0.3s ease;
}
.task-requirement {
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 25px;
    margin: 20px 0;
    position: relative;
}
.task-requirement.completed {
    border-color: #28a745;
    background: #f8fff9;
}
.task-requirement.current {
    border-color: #007bff;
    background: #f8f9ff;
    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
}
.task-requirement.locked {
    background: #f8f8f8;
    color: #6c757d;
    border-color: #e9ecef;
}
.task-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}
.task-number {
    background: #007bff;
    color: white;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-right: 15px;
    flex-shrink: 0;
}
.task-number.completed {
    background: #28a745;
}
.task-number.locked {
    background: #6c757d;
}
.task-title {
    font-size: 1.3em;
    font-weight: bold;
    color: #333;
    margin: 0;
}
.task-description {
    margin: 15px 0;
    line-height: 1.6;
    color: #555;
}
.task-details {
    margin-top: 15px;
}
.task-details ul {
    margin: 10px 0;
    padding-left: 25px;
}
.task-details li {
    margin: 8px 0;
    color: #666;
}
.complete-button {
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    margin-top: 15px;
}
.complete-button:hover {
    background: #218838;
}
.locked-message {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 5px;
    padding: 15px;
    margin-top: 15px;
    color: #856404;
}
.status-badge {
    font-size: 0.8em;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: bold;
    margin-left: 10px;
}
.status-completed {
    background: #d4edda;
    color: #155724;
}
.status-current {
    background: #cce7ff;
    color: #004085;
}
.status-locked {
    background: #e2e3e5;
    color: #6c757d;
}
.task-title {
    font-size: 1.3em;
    font-weight: bold;
    color: #333;
    margin: 0;
}
.task-description {
    margin: 15px 0;
    line-height: 1.6;
    color: #555;
}
.task-details {
    margin-top: 15px;
}
.task-details ul {
    margin: 10px 0;
    padding-left: 25px;
}
.task-details li {
    margin: 8px 0;
    color: #666;
}
.complete-button {
    background: #28a745;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    margin-top: 15px;
}
.complete-button:hover {
    background: #218838;
}
.locked-message {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 5px;
    padding: 15px;
    margin-top: 15px;
    color: #856404;
}
.status-badge {
    font-size: 0.8em;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: bold;
    margin-left: 10px;
}
.status-completed {
    background: #d4edda;
    color: #155724;
}
.status-current {
    background: #cce7ff;
    color: #004085;
}
.status-locked {
    background: #e2e3e5;
    color: #6c757d;
}
.open-vscode-btn {
    background: #17a2b8;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.9em;
    margin-left: 10px;
    text-decoration: none;
    display: inline-block;
}
.open-vscode-btn:hover {
    background: #138496;
    color: white;
    text-decoration: none;
}
.coding-tools {
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 15px;
    margin: 20px 0;
    text-align: center;
}
{% endblock %}

{% block content %}
<div class="task-card">
    {% if coding_condition == 'vibe' %}
    <div class="coding-reminder vibe">
        üîÆ <strong>Vibe Coding:</strong> Trust your intuition and code naturally. Focus on understanding and creative problem-solving.
    </div>
    {% elif coding_condition == 'ai-assisted' %}
    <div class="coding-reminder ai-assisted">
        ü§ñ <strong>AI-Assisted Coding:</strong> Leverage AI tools and assistance. Use copilot, autocomplete, and other AI features to enhance your coding.
    </div>
    {% endif %}
    
    <h1>Coding Task</h1>
    <div class="participant-id">Participant ID: {{ participant_id }}</div>
    
    <div class="timer-section">
        <h4>‚è∞ Session Timer</h4>
        <div id="timer-display" class="timer-display">40:00</div>
        <p><small>You have 40 minutes to complete as many tasks as possible</small></p>
    </div>
    
    <div class="progress-section">
        <h3>Progress: {{ completed_tasks|length }} of {{ total_tasks }} tasks completed</h3>
        <div class="progress-bar">
            <div class="progress-fill" style="width: {{ (completed_tasks|length / total_tasks * 100)|round(1) }}%"></div>
        </div>
    </div>
    
    <div class="coding-tools">
        <h4>üõ†Ô∏è Coding Environment</h4>
        <p>Your repository should open automatically in VS Code. If it doesn't, click the button below:</p>
        <a href="/open-vscode" class="open-vscode-btn">üìù Open VS Code</a>
        <br><br>
        <small>Repository location: study-{{ participant_id }}</small>
    </div>
    
    {% for requirement in task_requirements %}
    <div class="task-requirement 
        {% if requirement.id in completed_tasks %}completed
        {% elif requirement.id == current_task %}current
        {% elif requirement.id > current_task %}locked
        {% endif %}" data-task-id="{{ requirement.id }}">
        
        <div class="task-header">
            <div class="task-number 
                {% if requirement.id in completed_tasks %}completed
                {% elif requirement.id > current_task %}locked
                {% endif %}">
                {% if requirement.id in completed_tasks %}‚úì{% else %}{{ requirement.id }}{% endif %}
            </div>
            <h3 class="task-title">{{ requirement.title }}</h3>
            {% if requirement.id in completed_tasks %}
                <span class="status-badge status-completed">Completed</span>
            {% elif requirement.id == current_task %}
                <span class="status-badge status-current">Current Task</span>
            {% else %}
                <span class="status-badge status-locked">Locked</span>
            {% endif %}
        </div>
        
        {% if requirement.id <= current_task %}
            <div class="task-description">
                {{ requirement.description }}
            </div>
            
            <div class="task-details">
                <strong>Requirements:</strong>
                <ul>
                    {% for detail in requirement.details %}
                    <li>{{ detail }}</li>
                    {% endfor %}
                </ul>
            </div>
            
            {% if requirement.id == current_task and requirement.id not in completed_tasks %}
            <form method="POST" action="/complete-task" style="margin-top: 15px;">
                <input type="hidden" name="task_id" value="{{ requirement.id }}">
                <button type="submit" class="complete-button">
                    Mark as Complete
                </button>
            </form>
            {% endif %}
        {% else %}
            <div class="locked-message">
                <strong>üîí This task is locked.</strong><br>
                Complete the previous task to unlock this requirement.
            </div>
        {% endif %}
    </div>
    {% endfor %}
    
    {% if completed_tasks|length == total_tasks %}
    <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 20px; margin: 20px 0; text-align: center;">
        <h3 style="color: #155724; margin-bottom: 10px;">üéâ Congratulations!</h3>
        <p style="color: #155724; margin: 0;">You have completed all coding tasks. Great work!</p>
    </div>
    {% endif %}
    
    <div class="nav-buttons">
        <div>
            {% if completed_tasks|length == total_tasks %}
                <a href="/ux-questionnaire" class="btn btn-success" style="margin-left: 10px;">Complete UX Survey ‚Üí</a>
            {% elif timer_finished and current_task in completed_tasks %}
                <a href="/ux-questionnaire" class="btn btn-success" style="margin-left: 10px;">Complete UX Survey ‚Üí</a>
            {% endif %}
        </div>
    </div>
</div>

<!-- Timer Modal -->
<div id="timer-modal" class="timer-modal">
    <div class="timer-modal-content">
        <h3>‚è∞ Time's Up!</h3>
        <p>You've reached the 40-minute time limit for the coding session.</p>
        <p>You can either:</p>
        <div class="timer-modal-buttons">
            <button id="btn-continue-survey" class="btn-continue-survey">
                Go to UX Survey Now
            </button>
            <button id="btn-finish-task" class="btn-finish-task">
                Finish Current Task First
            </button>
        </div>
        <p><small>If you choose to finish the current task, you won't be able to start new tasks.</small></p>
    </div>
</div>

<script>
let timerInterval;
let remainingTime = {{ remaining_time }};
let timerFinished = {{ timer_finished|lower }};
let modalShown = false;

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes}:${secs.toString().padStart(2, '0')}`;
}

function updateTimerDisplay() {
    const timerDisplay = document.getElementById('timer-display');
    
    if (remainingTime <= 0) {
        timerDisplay.textContent = '0:00';
        timerDisplay.className = 'timer-display timer-danger';
        
        if (!modalShown && !timerFinished) {
            showTimerModal();
            modalShown = true;
        }
        
        // Disable new task buttons if timer is finished
        if (timerFinished) {
            disableNewTasks();
        }
        
        return;
    }
    
    timerDisplay.textContent = formatTime(remainingTime);
    
    // Change color based on remaining time
    if (remainingTime <= 300) { // 5 minutes
        timerDisplay.className = 'timer-display timer-danger';
    } else if (remainingTime <= 600) { // 10 minutes
        timerDisplay.className = 'timer-display timer-warning';
    } else {
        timerDisplay.className = 'timer-display';
    }
}

function showTimerModal() {
    document.getElementById('timer-modal').style.display = 'block';
    
    // Send notification to server that timer expired
    fetch('/timer-expired', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    });
}

function disableNewTasks() {
    // Hide all locked tasks when timer expires and user chooses to continue
    const taskRequirements = document.querySelectorAll('.task-requirement');
    const currentTaskId = {{ current_task }};
    
    taskRequirements.forEach((taskReq) => {
        const taskId = parseInt(taskReq.getAttribute('data-task-id'));
        if (taskId > currentTaskId) {
            // Hide the entire locked task
            taskReq.style.display = 'none';
        }
    });
    
    // Add notice about no new tasks
    const existingNotice = document.querySelector('.timer-expired-notice');
    if (!existingNotice) {
        const notice = document.createElement('div');
        notice.className = 'timer-expired-notice';
        notice.style.cssText = 'background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 20px 0; text-align: center; color: #856404;';
        notice.innerHTML = '<strong>‚è∞ Time limit reached:</strong> You can finish your current task but cannot start new ones.';
        
        const taskCard = document.querySelector('.task-card');
        const timerSection = document.querySelector('.timer-section');
        taskCard.insertBefore(notice, timerSection.nextSibling);
    }
}

// Override the complete task form submission to reload page to show survey button
document.addEventListener('DOMContentLoaded', function() {
    const completeTaskForms = document.querySelectorAll('form[action="/complete-task"]');
    completeTaskForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            // If timer is finished, we'll reload the page to show the survey button
            if (timerFinished) {
                // Let the form submit naturally and the page will reload
            }
        });
    });
});

function startTimer() {
    updateTimerDisplay();
    
    timerInterval = setInterval(() => {
        remainingTime -= 1;
        updateTimerDisplay();
        
        if (remainingTime <= 0) {
            clearInterval(timerInterval);
        }
    }, 1000);
}

// Event listeners for modal buttons
document.getElementById('btn-continue-survey').addEventListener('click', function() {
    window.location.href = '/ux-questionnaire';
});

document.getElementById('btn-finish-task').addEventListener('click', function() {
    document.getElementById('timer-modal').style.display = 'none';
    timerFinished = true;
    disableNewTasks();
});

// Close modal when clicking outside of it
window.addEventListener('click', function(event) {
    const modal = document.getElementById('timer-modal');
    if (event.target === modal) {
        modal.style.display = 'none';
        timerFinished = true;
        disableNewTasks();
    }
});

// Start the timer when page loads
document.addEventListener('DOMContentLoaded', function() {
    if (timerFinished) {
        disableNewTasks();
    }
    startTimer();
});
</script>
{% endblock %}

{% extends "base.jinja" %}

{% block title %}{{ participant_id }} - Coding Task{% endblock %}

{% block additional_styles %}
.task-card {
    text-align: left;
}
h1 {
    text-align: center;
}
.participant-id {
    text-align: center;
}
.subtle-stopwatch {
    position: fixed;
    top: 20px;
    right: 20px;
    background: rgba(255, 255, 255, 0.95);
    color: #495057;
    font-size: 1em;
    font-weight: 500;
    padding: 10px 16px;
    border-radius: 8px;
    font-family: 'Courier New', monospace;
    z-index: 1000;
    backdrop-filter: blur(4px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
}
.subtle-stopwatch.warning {
    background: rgba(220, 53, 69, 0.95);
    color: white;
    box-shadow: 0 2px 12px rgba(220, 53, 69, 0.3);
}
.timer-modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
}
.timer-modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    border-radius: 8px;
    width: 80%;
    max-width: 500px;
    text-align: center;
}
.timer-modal h3 {
    margin-bottom: 15px;
}
.timer-modal-buttons {
    margin-top: 20px;
}
.timer-modal-buttons button {
    margin: 0 10px;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
}
.btn-continue-survey {
    background: #28a745;
    color: white;
}
.btn-continue-survey:hover {
    background: #218838;
}
.btn-finish-task {
    background: #6c757d;
    color: white;
}
.btn-finish-task:hover {
    background: #5a6268;
}
.coding-guidelines {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 15px;
    margin: 15px 0;
}
.coding-guidelines h4 {
    margin: 0 0 10px 0;
    font-size: 1em;
}
.coding-guidelines ul {
    margin: 0;
    padding-left: 20px;
    font-size: 0.9em;
}
.coding-guidelines li {
    margin: 8px 0;
}
.task-requirement {
    background: white;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    padding: 25px;
    margin: 20px 0;
    position: relative;
}
.task-requirement.completed {
    border-color: #28a745;
    background: #f8fff9;
}
.task-requirement.current {
    border-color: #007bff;
    background: #f8f9ff;
    box-shadow: 0 0 0 3px rgba(0,123,255,0.1);
}
.task-requirement.locked {
    background: #f8f8f8;
    color: #6c757d;
    border-color: #e9ecef;
}
.more-tasks-hint {
    border: 2px dashed #dee2e6;
    border-radius: 8px;
    padding: 20px;
    margin: 20px 0;
    text-align: center;
    position: relative;
    overflow: hidden;
}
.hint-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    position: relative;
    z-index: 1;
}
.hint-icon {
    font-size: 1.2em;
    opacity: 0.7;
}
.hint-text {
    color: #6c757d;
    font-size: 0.9em;
}
.task-header {
    display: flex;
    align-items: center;
    margin-bottom: 15px;
}
.task-number {
    background: #007bff;
    color: white;
    width: 35px;
    height: 35px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-right: 15px;
    flex-shrink: 0;
}
.task-number.completed {
    background: #28a745;
}
.task-title {
    font-size: 1.3em;
    font-weight: bold;
    color: #333;
    margin: 0;
}
.task-description {
    margin: 15px 0;
    line-height: 1.6;
    color: #555;
}
.task-details {
    margin-top: 15px;
}
.task-details ul {
    margin: 10px 0;
    padding-left: 25px;
}
.task-details li {
    margin: 8px 0;
    color: #666;
}
.complete-button {
    background: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1em;
    margin-top: 15px;
}
.complete-button:hover {
    background: #0056b3;
}
.locked-message {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 5px;
    padding: 15px;
    margin-top: 15px;
    color: #856404;
}
.status-badge {
    font-size: 0.8em;
    padding: 4px 8px;
    border-radius: 12px;
    font-weight: bold;
    margin-left: 10px;
}
.status-completed {
    background: #d4edda;
    color: #155724;
}
.status-current {
    background: #cce7ff;
    color: #004085;
}
.open-vscode-btn {
    color: #17a2b8;
    font-size: 0.9em;
}
.open-vscode-btn:hover {
    color: #138496;
    text-decoration: underline;
}
.coding-tools {
    background: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 6px;
    padding: 10px 15px;
    margin: 15px 0;
    text-align: center;
    font-size: 0.9em;
}
.coding-tools h4 {
    font-size: 1em;
    margin: 0 0 8px 0;
    color: #6c757d;
}
.coding-tools p {
    margin: 5px 0;
    color: #6c757d;
}
.technical-notes {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 15px;
    margin: 15px 0;
}
.technical-notes h4 {
    margin: 0 0 10px 0;
    font-size: 1em;
}
.technical-notes ul {
    margin: 0;
    padding-left: 20px;
    font-size: 0.9em;
}
.technical-notes li {
    margin: 8px 0;
}
.mockup-section {
    background: white;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    padding: 20px;
    margin: 20px 0;
    text-align: center;
}
.mockup-image {
    max-width: 50%;
    height: auto;
}
{% endblock %}

{% block content %}
<div class="task-card">
    <h1>Coding Task</h1>
    <div class="participant-id">Participant ID: {{ participant_id }}</div>
    
    <!-- Subtle countdown timer in upper right corner -->
    <div id="subtle-stopwatch" class="subtle-stopwatch">
        <span id="elapsed-time">40:00</span>
    </div>
    {% if study_stage == 1 %}
    <p>Using the AI coding techniques you just learned your task is now to implement a simple web-based <strong>PDF Merger Tool</strong> for personal use. </p>
    {% elif study_stage == 2 %}
    <p>Building on your work from the last stage your task is now to implement <strong>additional features</strong> for your web-based <strong>PDF Merger Tool</strong>.
    Your code has been restored for you and you can continue working on it.</p>
    {% endif %}
    <div class="mockup-section">
        <img src="/static/mockup.png" alt="PDF Merger Tool Mockup" class="mockup-image">
    </div>

    <p>You'll receive the task in <strong>step-by-step requirements</strong>. Each new requirement will appear only after you've completed the previous one. When you mark a requirement as completed, your progress is automatically saved.</p>
    
    <p>In <strong>40 minutes</strong> from now you'll be reminded to finish your work.</p>
        
    <p>The coding environment has been configured for you with the AI tools you need. Your personal coding workspace opens automatically in VS Code. If it doesn't: <a href="/open-vscode" class="open-vscode-btn">Open VS Code</a></p>
   
    <div class="technical-notes">
        <h4>Technical Notes:</h4>
        <ul>
            <li>Using <strong>pure JavaScript or TypeScript</strong> is sufficient, you don't need to use frontend frameworks (e.g., React) for the tool</li>
            <li>You may use <strong>any open-source libraries</strong> you want to achieve the desired functionality (e.g., for PDF processing)</li>
            <li>The solution must run <strong>entirely client-side</strong> in the browser without any server-side code</li>
            <li>You don't need to adhere to the provided <strong>UI mockup</strong></li>
            <li>The code on the <strong>stage branch</strong> is judged as the final submission, after each requirement the code is committed automatically, you don't need to handle version control yourself</li>
        </ul>
    </div>

    <p>Please remember to use AI in your coding approach like outlined in the tutorial.<br>
    If you're unsure what that means, you can revisit the brief <strong>coding guidelines</strong> below at any time during the task.</p>

    {% if coding_condition == 'vibe' %}
    <div class="coding-guidelines">
        <h4>Coding Guidelines:</h4>
        <ul>
            <li>Use natural language to describe the features, look, and feel you want</li>
            <li>Let the AI handle the implementation details</li>
            <li>Ask the AI to generate code, make changes and fix bugs</li>
            <li>Iterate fast: try ideas, test, and revise quickly</li>
            <li>Don't write code manually or debug yourself</li>
            <li>Don't review every line of code unless something is clearly wrong</li>
        </ul>
    </div>
    {% elif coding_condition == 'ai-assisted' %}
    <div class="coding-guidelines">
        <h4>Coding Guidelines:</h4>
        <ul>
            <li>Write, understand, and manage your own code</li>
            <li>Treat AI as a collaborative assistant to boost your productivity</li>
            <li>Use AI tools for code completion, generating boilerplate, or documentation</li>
            <li>Review and decide which AI suggestions to accept</li>
        </ul>
    </div>
    {% endif %}

    {% for requirement in task_requirements %}
        {% if requirement.id <= current_task %}
        <div class="task-requirement 
            {% if requirement.id in completed_tasks %}completed
            {% elif requirement.id == current_task %}current
            {% endif %}" data-task-id="{{ requirement.id }}">
            
            <div class="task-header">
                <div class="task-number 
                    {% if requirement.id in completed_tasks %}completed{% endif %}">
                    {% if requirement.id in completed_tasks %}âœ“{% else %}{{ requirement.id }}{% endif %}
                </div>
                <h3 class="task-title">{{ requirement.title }}</h3>
                {% if requirement.id in completed_tasks %}
                    <span class="status-badge status-completed">Completed</span>
                {% elif requirement.id == current_task %}
                    <span class="status-badge status-current">Current Requirement</span>
                {% endif %}
            </div>
            
            <div class="task-description">
                {{ requirement.description }}
            </div>
            
            {% if requirement.details %}
            <div class="task-details">
                <strong>Details:</strong>
                <ul>
                    {% for detail in requirement.details %}
                    <li>{{ detail }}</li>
                    {% endfor %}
                </ul>
            </div>
            {% endif %}
            
            {% if requirement.id == current_task and requirement.id not in completed_tasks %}
            <form method="POST" action="/complete-task" style="margin-top: 15px;">
                <input type="hidden" name="task_id" value="{{ requirement.id }}">
                <button type="submit" class="complete-button">
                    Mark as Complete
                </button>
            </form>
            {% endif %}
        </div>
        {% endif %}
    {% endfor %}
    
    {% if current_task < total_tasks %}
    <div class="more-tasks-hint">
        <div class="hint-content">
            <span class="hint-text">More requirements will be revealed as you progress...</span>
        </div>
    </div>
    {% endif %}
    
    {% if completed_tasks|length == total_tasks %}
    <div style="background: #d4edda; border: 1px solid #c3e6cb; border-radius: 8px; padding: 0px 0px 20px 0px; margin: 20px 0; text-align: center;">
        <h3 style="color: #155724; margin-bottom: 10px;">ðŸŽ‰ Congratulations!</h3>
        <p style="color: #155724; margin: 0;">You have completed all coding requirements. Great work!</p>
    </div>
    {% endif %}
    
    <div class="nav-buttons">
        <div>
            {% if completed_tasks|length == total_tasks %}
                <a href="/ux-questionnaire" class="btn btn-success" style="margin-left: 10px;">Complete UX Survey â†’</a>
            {% elif timer_finished and current_task in completed_tasks %}
                <a href="/ux-questionnaire" class="btn btn-success" style="margin-left: 10px;">Complete UX Survey â†’</a>
            {% endif %}
        </div>
    </div>
</div>

<!-- Timer Modal -->
<div id="timer-modal" class="timer-modal">
    <div class="timer-modal-content">
        <h3>Time's Up!</h3>
        <p>You've reached the 40-minute time limit for the coding session.</p>
        <p>You can either:</p>
        <div class="timer-modal-buttons">
            <button id="btn-continue-survey" class="btn-continue-survey">
                Go to UX Survey
            </button>
            <button id="btn-finish-task" class="btn-finish-task">
                Finish Current Requirement
            </button>
        </div>
        <p><small>If you choose to finish the current requirement, you won't be able to start new requirements.</small></p>
    </div>
</div>

<script>
let remainingTime = {{ remaining_time }}; // Use remaining time directly
let timerFinished = {{ timer_finished|lower }};
let modalShown = false;

function formatTime(seconds) {
    const minutes = Math.floor(seconds / 60);
    const secs = Math.floor(seconds % 60);
    return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
}

function updateTimer() {
    const timerDisplay = document.getElementById('elapsed-time');
    const timerElement = document.getElementById('subtle-stopwatch');
    
    // Update display
    timerDisplay.textContent = formatTime(Math.max(0, remainingTime));
    
    // Check if we're in the last 10% of time (last 4 minutes)
    const totalTime = 40 * 60; // 40 minutes in seconds
    const warningThreshold = totalTime * 0.1; // 10% of total time
    
    if (remainingTime <= warningThreshold && remainingTime > 0) {
        timerElement.classList.add('warning');
    } else {
        timerElement.classList.remove('warning');
    }
}

function startTimer() {
    updateTimer();
    
    const timerInterval = setInterval(() => {
        if (remainingTime > 0) {
            remainingTime -= 1;
            updateTimer();
        }
        
        // Show modal when time runs out
        if (remainingTime <= 0 && !timerFinished) {
            if (!modalShown) {
                showTimerModal();
                modalShown = true;
            }
            clearInterval(timerInterval);
        }
    }, 1000);
}

function showTimerModal() {
    document.getElementById('timer-modal').style.display = 'block';
    
    // Send notification to server that timer expired
    fetch('/timer-expired', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        }
    });
}

function disableNewTasks() {
    // Hide the "more tasks" hint when timer expires
    const moreTasksHint = document.querySelector('.more-tasks-hint');
    if (moreTasksHint) {
        moreTasksHint.style.display = 'none';
    }
    
    // Add notice about no new tasks
    const existingNotice = document.querySelector('.timer-expired-notice');
    if (!existingNotice) {
        const notice = document.createElement('div');
        notice.className = 'timer-expired-notice';
        notice.style.cssText = 'background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 15px; margin: 20px 0; text-align: center; color: #856404; font-size: 0.9em;';
        notice.innerHTML = '<strong>Time limit reached:</strong> You can finish your current requirement but cannot start new ones.';
        
        const taskCard = document.querySelector('.task-card');
        const codingTools = document.querySelector('.coding-tools');
        taskCard.insertBefore(notice, codingTools);
    }
}

// Save scroll position before form submission and restore after page load
function saveScrollPosition() {
    sessionStorage.setItem('taskPageScrollY', window.scrollY.toString());
}

function restoreScrollPosition() {
    const savedScrollY = sessionStorage.getItem('taskPageScrollY');
    if (savedScrollY) {
        window.scrollTo(0, parseInt(savedScrollY));
        // Clear the saved position after restoring
        sessionStorage.removeItem('taskPageScrollY');
    }
}

// Override the complete task form submission to reload page to show survey button
document.addEventListener('DOMContentLoaded', function() {
    // Restore scroll position when page loads
    restoreScrollPosition();
    
    const completeTaskForms = document.querySelectorAll('form[action="/complete-task"]');
    completeTaskForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            // Save scroll position before form submission
            saveScrollPosition();
            
            // If timer is finished, we'll reload the page to show the survey button
            if (timerFinished) {
                // Let the form submit naturally and the page will reload
            }
        });
    });
});

// Event listeners for modal buttons
document.getElementById('btn-continue-survey').addEventListener('click', function() {
    window.location.href = '/ux-questionnaire';
});

document.getElementById('btn-finish-task').addEventListener('click', function() {
    document.getElementById('timer-modal').style.display = 'none';
    timerFinished = true;
    disableNewTasks();
});

// Close modal when clicking outside of it
window.addEventListener('click', function(event) {
    const modal = document.getElementById('timer-modal');
    if (event.target === modal) {
        modal.style.display = 'none';
        timerFinished = true;
        disableNewTasks();
    }
});

// Start the timer when page loads
document.addEventListener('DOMContentLoaded', function() {
    if (timerFinished) {
        disableNewTasks();
    }
    
    startTimer();
});
</script>
{% endblock %}
